"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[907],{5680:(e,r,n)=>{n.d(r,{xA:()=>u,yg:()=>y});var t=n(6540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),s=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=s(e.components);return t.createElement(c.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),f=a,y=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return n?t.createElement(y,i(i({ref:r},u),{},{components:n})):t.createElement(y,i({ref:r},u))}));function y(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5232:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=n(8168),a=(n(6540),n(5680));const o={id:"refactor",title:"Refactoring your code base",sidebar_label:"Refactoring"},i=void 0,l={unversionedId:"reference/playground/refactor",id:"reference/playground/refactor",title:"Refactoring your code base",description:"Our playground provides a user-friendly way to apply structural transformations to your code base.",source:"@site/docs/reference/playground/refactor.md",sourceDirName:"reference/playground",slug:"/reference/playground/refactor",permalink:"/piranha/docs/reference/playground/refactor",draft:!1,editUrl:"https://github.com/uber/piranha/tree/website/site/docs/reference/playground/refactor.md",tags:[],version:"current",frontMatter:{id:"refactor",title:"Refactoring your code base",sidebar_label:"Refactoring"},sidebar:"docsSidebar",previous:{title:"Rule Inference",permalink:"/piranha/docs/reference/playground/inference"},next:{title:"Visualizing rules",permalink:"/piranha/docs/reference/vis"}},c={},s=[],u={toc:s},p="wrapper";function d(e){let{components:r,...n}=e;return(0,a.yg)(p,(0,t.A)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Our playground provides a user-friendly way to apply structural transformations to your code base.\nWe use the same syntax used in the Piranha CLI configuration files, with one small difference: ",(0,a.yg)("strong",{parentName:"p"},"all\nconfigurations need to be in the same file"),". To use it, simply copy and paste your configurations into the playground."),(0,a.yg)("p",null,"Besides the standard CLI options, like rules and edges, you also need to specify substitutions in the same file.\nHere's an example to illustrate how it's done:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-toml"},'[[rules]]\nname = "delete_variable_declaration"\nquery = """(\n (local_variable_declaration \n  declarator: (variable_declarator \n                   name: (_) @vdcl.lhs) @field_declaration)\n  (#eq? @vdcl.lhs "@identifier")\n"""\nreplace_node = "field_declaration"\nreplace = ""\nholes = ["variable_name"]\n\n[[rules]]\nname = "replace_identifier_with_value"\nquery = """(\n (identifier) @identifier\n (#eq? @identifier "@variable_name")\n)\n"""\nreplace_node = "identifier"\nreplace = "@value"\nholes = ["variable_name", "value"]\n\n[[edges]]\nscope = "Method"\nfrom = "replace_identifier_with_value"\nto = ["delete_variable_declaration"]\n\n[[substitutions]]\nvariable_name = "xyz"\nvalue = "123"\n')),(0,a.yg)("p",null,"We plan to incorporate all Piranha arguments into our playground in the future. However, as of now, we only support substitutions."),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"Please be aware that refactoring your code base may take a few seconds,\nespecially when dealing with larger directories containing millions of lines of code.")))}d.isMDXComponent=!0}}]);