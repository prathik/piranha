"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[420],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,m=c["".concat(o,".").concat(d)]||c[d]||g[d]||i;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9014:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(8168),a=(n(6540),n(5680)),i=n(6025);const l={id:"intro",title:"Overview",sidebar_label:"Overview"},s=void 0,o={unversionedId:"reference/getting-started/intro",id:"reference/getting-started/intro",title:"Overview",description:"Polyglot Piranha is a flexible multilingual structural search/replace engine that allows users to apply chains of interdependent structural search/replace rules for deeper cleanups. Polyglot Piranha builds upon tree-sitter queries for expressing the structural search/replace rules.",source:"@site/docs/reference/getting-started/stale.md",sourceDirName:"reference/getting-started",slug:"/reference/getting-started/intro",permalink:"/piranha/docs/reference/getting-started/intro",draft:!1,editUrl:"https://github.com/uber/piranha/tree/website/site/docs/reference/getting-started/stale.md",tags:[],version:"current",frontMatter:{id:"intro",title:"Overview",sidebar_label:"Overview"}},u={},p=[{value:"When is Polyglot Piranha useful?",id:"when-is-polyglot-piranha-useful",level:2}],c={toc:p},g="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(g,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Polyglot Piranha is a flexible multilingual structural search/replace engine that allows users to apply chains of interdependent structural search/replace rules for deeper cleanups. Polyglot Piranha builds upon tree-sitter queries for expressing the structural search/replace rules."),(0,a.yg)("div",{style:{display:"flex",justifyContent:"center"}},(0,a.yg)("img",{src:(0,i.A)("/img/piranha_architecture.svg"),alt:"Polyglot Piranha Architecture",width:"800",height:"500"})),(0,a.yg)("p",null,"This is the higher level architecture of Polyglot Piranha.\nAt its heart, Polyglot Piranha is a structural find/replacement (rewrite) engine and pre-build language specific cleanup rules like - like simplifying boolean expressions, simplifying ",(0,a.yg)("inlineCode",{parentName:"p"},"if-else")," statements, deleting empty class, deleting files with no type declarations, inline local variables, and many more.\nA user provides :"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"A set (or, a graph) of structural find/replace rules"),(0,a.yg)("li",{parentName:"ul"},"Path to the code base"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",{parentName:"li",href:"#piranha-arguments"},"Arguments")," to modify Piranha's behavior (like deleting associated comments).")),(0,a.yg)("p",null,"When Piranha applies the set (or graph) of user defined rules, it triggers the ",(0,a.yg)("strong",{parentName:"p"},"pre-built")," language specific cleanup rules to do a deep cleanup.\nBelow we can see an ",(0,a.yg)("a",{parentName:"p",href:"#visualizing-graphs-for-rules-and-groups"},"automatically generated graph")," for the Java pre-built cleanup rules."),(0,a.yg)("div",{style:{display:"flex",justifyContent:"center"}},(0,a.yg)("img",{src:(0,i.A)("/img/java_prebuilt_rules.svg"),alt:"Java pre-built cleanup rules",width:"800",height:"500"})),(0,a.yg)("h2",{id:"when-is-polyglot-piranha-useful"},"When is Polyglot Piranha useful?"),(0,a.yg)("h5",null," Example 1 (Stale Feature Flag Cleanup) "),(0,a.yg)("p",null,"Let's take an example, where we know for a fact that the expression ",(0,a.yg)("inlineCode",{parentName:"p"},'exp.isTreated("SHOW_MENU")')," always returns ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," (i.e. the feature ",(0,a.yg)("em",{parentName:"p"},"Show Menu")," is treated)"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},'public String fooBar(boolean x) {\n    if(exp.isTreated("SHOW_MENU")|| x){\n        String menu = getMenu();\n        return menu;\n    }\n    return "";\n}\n')),(0,a.yg)("p",null,"To cleanup this code with Piranha, a user would have to write ",(0,a.yg)("em",{parentName:"p"},"one")," rule to update the expressions like ",(0,a.yg)("inlineCode",{parentName:"p"},'exp.isTreated("SHOW_MENU")')," to ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," and hook it to the pre-built boolean simplification rules. It would result in :"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"public String fooBar(boolean x) {\n    String menu = getMenu();\n    return menu;\n}\n")),(0,a.yg)("p",null,"Note how, user only specified the seed rule to update the expression to true, and Piranha simplified the disjunction (",(0,a.yg)("inlineCode",{parentName:"p"},'exp.isTreated("SHOW_MENU")|| x')," => ",(0,a.yg)("inlineCode",{parentName:"p"},"true"),"), then removed the stale if condition and finally deleted the unreachable return statement (",(0,a.yg)("inlineCode",{parentName:"p"},'return "";'),")."),(0,a.yg)("h5",null," Example 2 (Structural Find/Replace with built-in cleanup) "),(0,a.yg)("p",null,"Let's say a user writes a piranha rule to delete an unused enum case (let's say ",(0,a.yg)("inlineCode",{parentName:"p"},"LOW"),'). However, this enum case "co-incidentally" is the only enum case in this enum declaration.'),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"enum Level {\n  LOW,\n}\n")),(0,a.yg)("p",null,"If the user hooks up this ",(0,a.yg)("em",{parentName:"p"},"enum case deletion")," rule to the pre-built rules, it would not only delete the enum case (",(0,a.yg)("inlineCode",{parentName:"p"},"LOW"),"), but also the consequent empty enum declaration and also optionally delete the consequently empty compilation unit."),(0,a.yg)("h5",null," Example 3 (Structural Find/Replace with custom cleanup) "),(0,a.yg)("p",null,"Let's take a canonical example of replacing ",(0,a.yg)("inlineCode",{parentName:"p"},"Arrays.asList")," with ",(0,a.yg)("inlineCode",{parentName:"p"},"Collections.singletonList"),", when possible.\nThis task involves two steps (i) Replacing the expression (ii) Adding the import statement for ",(0,a.yg)("inlineCode",{parentName:"p"},"Collections")," if absent (Assuming ",(0,a.yg)("em",{parentName:"p"},"google java format")," takes care of the unused imports \ud83d\ude04).\nHowever, Piranha does not contain pre-built rules to add such a custom import statements."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-java"},"import java.util.ArrayList;\nimport java.util.Arrays;\n+ import java.util.Collections;\nclass Character{\n    String name;\n    List<String> friends;\n    List<String> enemies;\n\n    Character(String name) {\n        this.name = name;\n        this.friends = new ArrayList<>();\n -         this.enemies = Arrays.asList(this.name);\n +         this.enemies = Collections.singletonList(this.name);\n    }\n}\n")),(0,a.yg)("p",null,'For such a scenario a developer could first write a seed rule for replacing the expression and then craft a custom "cleanup" rule (that would be triggered by the seed rule) to add the import statement if absent within the same file.'),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Note a user can also craft a set of rules that trigger no other rule, i.e. use piranha as a simple structural find/replace tool")),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"If you end up implementing a cleanup rule that could be useful for the community, feel free to make a PR to add it into the pre-built language specific rules")))}d.isMDXComponent=!0}}]);