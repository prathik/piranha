"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[238],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>d});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,d=u["".concat(s,".").concat(m)]||u[m]||f[m]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9010:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(8168),a=(n(6540),n(5680));const o={id:"cli",label:"CLI",title:"Command Line Interface"},i=void 0,l={unversionedId:"reference/cli",id:"reference/cli",title:"Command Line Interface",description:"Get platform-specific binary from releases or build it from source following the below steps:",source:"@site/docs/reference/cli.md",sourceDirName:"reference",slug:"/reference/cli",permalink:"/piranha/docs/reference/cli",draft:!1,editUrl:"https://github.com/uber/piranha/tree/website/site/docs/reference/cli.md",tags:[],version:"current",frontMatter:{id:"cli",label:"CLI",title:"Command Line Interface"},sidebar:"docsSidebar",previous:{title:"Python API",permalink:"/piranha/docs/reference/api"},next:{title:"Overview",permalink:"/piranha/docs/reference/playground/playground-overview"}},s={},c=[],p={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Get platform-specific binary from ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/uber/piranha/releases"},"releases")," or build it from source following the below steps:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Install ",(0,a.yg)("a",{parentName:"li",href:"https://www.rust-lang.org/tools/install"},"Rust")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"git clone https://github.com/uber/piranha.git")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"cd piranha")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"cargo build --release")," (",(0,a.yg)("inlineCode",{parentName:"li"},"cargo build --release --no-default-features")," for macOS)"),(0,a.yg)("li",{parentName:"ul"},"Binary will be generated under ",(0,a.yg)("inlineCode",{parentName:"li"},"target/release"))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-shell"},"Usage: polyglot_piranha [OPTIONS] --path-to-codebase <PATH_TO_CODEBASE> --path-to-configurations <PATH_TO_CONFIGURATIONS> -l <LANGUAGE>\n\nOptions:\n  -c, --path-to-codebase <PATH_TO_CODEBASE>\n          Path to source code folder or file\n      --include [<INCLUDE>...]\n          Paths to include (as glob patterns)\n      --exclude [<EXCLUDE>...]\n          Paths to exclude (as glob patterns)\n          \n  -t, --code-snippet <CODE_SNIPPET>\n          Code snippet to transform [default: ]\n  -s <SUBSTITUTIONS>\n          These substitutions instantiate the initial set of rules. Usage : -s stale_flag_name=SOME_FLAG -s namespace=SOME_NS1\n  -f, --path-to-configurations <PATH_TO_CONFIGURATIONS>\n          Directory containing the configuration files -  `rules.toml` and  `edges.toml` (optional)\n  -j, --path-to-output-summary <PATH_TO_OUTPUT_SUMMARY>\n          Path to output summary json file\n  -l <LANGUAGE>\n          The target language [possible values: java, swift, py, kt, go, tsx, ts]\n      --delete-file-if-empty\n          User option that determines whether an empty file will be deleted\n      --delete-consecutive-new-lines\n          Replaces consecutive `\\n`s  with a `\\n`\n      --global-tag-prefix <GLOBAL_TAG_PREFIX>\n          the prefix used for global tag names [default: GLOBAL_TAG.]\n      --number-of-ancestors-in-parent-scope <NUMBER_OF_ANCESTORS_IN_PARENT_SCOPE>\n          The number of ancestors considered when `PARENT` rules [default: 4]\n      --cleanup-comments-buffer <CLEANUP_COMMENTS_BUFFER>\n          The number of lines to consider for cleaning up the comments [default: 2]\n      --cleanup-comments\n          Enables deletion of associated comments\n      --dry-run\n          Disables in-place rewriting of code\n      --allow-dirty-ast\n          Allows syntax errors in the input source code\n  -h, --help\n          Print help\n")),(0,a.yg)("p",null,"The output JSON is the serialization of- ",(0,a.yg)("a",{parentName:"p",href:"/src/models/piranha_output.rs"},(0,a.yg)("inlineCode",{parentName:"a"},"PiranhaOutputSummary"))," produced for each file touched or analyzed by Piranha."),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"It can be seen that the Python API is basically a wrapper around this command line interface.")))}f.isMDXComponent=!0}}]);