"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[441],{5680:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>g});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(t),y=r,g=u["".concat(p,".").concat(y)]||u[y]||c[y]||i;return t?a.createElement(g,l(l({ref:n},m),{},{components:t})):a.createElement(g,l({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=y;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7048:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(8168),r=(t(6540),t(5680));const i={id:"api",title:"Python API"},l=void 0,o={unversionedId:"reference/api",id:"reference/api",title:"Python API",description:"Currently, we support one simple API (execute_piranha), a simple python wrapper around Polyglot Piranha's CLI.",source:"@site/docs/reference/api.md",sourceDirName:"reference",slug:"/reference/api",permalink:"/piranha/docs/reference/api",draft:!1,editUrl:"https://github.com/uber/piranha/tree/website/site/docs/reference/api.md",tags:[],version:"current",frontMatter:{id:"api",title:"Python API"},sidebar:"docsSidebar",previous:{title:"Rule Languages",permalink:"/piranha/docs/reference/dsl/rules"},next:{title:"Command Line Interface",permalink:"/piranha/docs/reference/cli"}},p={},s=[],m={toc:s},u="wrapper";function c(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Currently, we support one simple API (",(0,r.yg)("inlineCode",{parentName:"p"},"execute_piranha"),"), a simple python wrapper around Polyglot Piranha's CLI.\nWe believe this makes it easy to incorporate Piranha in ",(0,r.yg)("em",{parentName:"p"},'"pipelining"'),"."),(0,r.yg)("h4",null," ",(0,r.yg)("code",null,"execute_piranha")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'from polyglot_piranha import execute_piranha, PiranhaArguments\n\npiranha_arguments = PiranhaArguments(\n    path_to_codebase = "...",\n    path_to_configurations = "...",\n    language= "java",\n    substitutions = {},\n    dry_run = False, \n    cleanup_comments = True\n)\npiranha_summary = execute_piranha(piranha_arguments)\n')),(0,r.yg)("p",null,"The API ",(0,r.yg)("inlineCode",{parentName:"p"},"execute_piranha")," accepts a ",(0,r.yg)("inlineCode",{parentName:"p"},"PiranhaArguments"),"\nAn object of PiranhaArguments can be instantiated with the following arguments:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"required"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"path_to_codebase")," (",(0,r.yg)("inlineCode",{parentName:"li"},"str"),"): Path to source code folder"),(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"required"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"path_to_configuration")," (",(0,r.yg)("inlineCode",{parentName:"li"},"str"),") : A directory containing files named ",(0,r.yg)("inlineCode",{parentName:"li"},"rules.toml")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"edges.toml"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"rules.toml"),": ",(0,r.yg)("em",{parentName:"li"},"piranha rules")," expresses the specific AST patterns to match and ",(0,r.yg)("strong",{parentName:"li"},"replacement patterns")," for these matches (in-place). These rules can also specify the pre-built language specific cleanups to trigger."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"edges.toml")," : expresses the flow between the rules"))),(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"required"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"language")," (",(0,r.yg)("inlineCode",{parentName:"li"},"str"),") : Target language (",(0,r.yg)("inlineCode",{parentName:"li"},"java"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"py"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"kt"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"swift"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"py"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"ts")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"tsx"),")"),(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"required"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"substitutions")," (",(0,r.yg)("inlineCode",{parentName:"li"},"dict"),"): Substitutions to instantiate the initial set of feature flag rules"),(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"optional"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"dry_run")," (",(0,r.yg)("inlineCode",{parentName:"li"},"bool"),") : Disables in-place rewriting of code"),(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"optional"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"cleanup_comments")," (",(0,r.yg)("inlineCode",{parentName:"li"},"bool"),") : Enables deletion of associated comments"),(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"optional"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"cleanup_comments_buffer")," (",(0,r.yg)("inlineCode",{parentName:"li"},"usize"),"): The number of lines to consider for cleaning up the comments"),(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"optional"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"number_of_ancestors_in_parent_scope")," (",(0,r.yg)("inlineCode",{parentName:"li"},"usize"),"): The number of ancestors considered when ",(0,r.yg)("inlineCode",{parentName:"li"},"PARENT")," rules"),(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"optional"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"delete_file_if_empty")," (",(0,r.yg)("inlineCode",{parentName:"li"},"bool"),"): User option that determines whether an empty file will be deleted"),(0,r.yg)("li",{parentName:"ul"},"(",(0,r.yg)("em",{parentName:"li"},"optional"),") ",(0,r.yg)("inlineCode",{parentName:"li"},"delete_consecutive_new_lines")," (",(0,r.yg)("inlineCode",{parentName:"li"},"bool"),") : Replaces consecutive ",(0,r.yg)("inlineCode",{parentName:"li"},"\\n"),"s  with a single ",(0,r.yg)("inlineCode",{parentName:"li"},"\\n"))),(0,r.yg)("h5",null," Returns "),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"[Piranha_Output]")," : a ",(0,r.yg)("a",{parentName:"p",href:"/src/models/piranha_output.rs"},(0,r.yg)("inlineCode",{parentName:"a"},"PiranhaOutputSummary"))," for each file touched or analyzed by Piranha. It contains useful information like, matches found (for ",(0,r.yg)("em",{parentName:"p"},"match-only")," rules), rewrites performed, and content of the file after the rewrite. The content is particularly useful when ",(0,r.yg)("inlineCode",{parentName:"p"},"dry_run")," is passed as ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),"."))}c.isMDXComponent=!0}}]);